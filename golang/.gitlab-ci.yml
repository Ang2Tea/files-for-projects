variables:
  GIT_CLEAN_FLAGS: -fxd -e ".go"
  TZ: Europe/Moscow
  GOPATH: $CI_PROJECT_DIR/.go

#https://docs.gitlab.com/ee/development/go_guide/

default:
  image: golang:1.23-alpine
  cache: &global_cache
    policy: pull
    key:
      files:
        - "go.sum"
    untracked: true
    unprotect: true
    when: on_success
    paths:
      - ".go/pkg/mod"
      - ".go/bin"

stages:
  - prepare
  - test
  - build

prepare:
  tags:
    - docker
  stage: prepare
  cache:
    <<: *global_cache
    policy: pull-push
  script:
    - mkdir -p .go
    - go mod download

    # modules for tests
    - go install github.com/jstemmer/go-junit-report/v2@latest
    - go get github.com/boumenot/gocover-cobertura
    - go install github.com/boumenot/gocover-cobertura

    # modules for linter
    - go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.63.4

lints:
  tags:
    - docker
  stage: test
  script:
    # Write the code coverage report to gl-code-quality-report.json
    # and print linting issues to stdout in the format: path/to/file:line description
    # remove `--issues-exit-code 0` or set to non-zero to fail the job if linting issues are detected
    - .go/bin/golangci-lint run --print-issued-lines=false --out-format code-climate:gl-code-quality-report.json,line-number
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json

tests:
  tags:
    - docker
  stage: test
  script:
    # go test ./...
    - go test -v -coverpkg=gitlab.appricot.ru/... -coverprofile=cover.out.tmp $(go list ./... | grep -v /vendor/) | tee report.txt

    # исключить из cover.out сгенерённые файлы
    - cat cover.out.tmp | grep -ve "_gen.go" -e "http_server" > cover.out

    # junit report
    - .go/bin/go-junit-report -set-exit-code < report.txt > junit.xml
    # cobertura
    - .go/bin/gocover-cobertura < cover.out > coverage.xml
    # output coverage results
    - go tool cover -func cover.out

  coverage: '/total:\t+\(statements\)\t+(\d+\.\d+)%/'
  artifacts:
    when: on_success
    reports:
      junit:
        - junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - cover.out
      - report.txt
      - cover.out.tmp

build:
  tags:
    - docker
  stage: build
  script:
    - mkdir -p out
    - go build -o appricot-cli ./cmd/appricot-cli/main.go
  artifacts:
    paths:
      - out
